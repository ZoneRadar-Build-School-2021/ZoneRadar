
@{
    ViewBag.Title = "BindingToGoogleOrRegister";
}

<form class="mb-3" id="bindGoogle-form-vue">
    <input v-model="inputData.account" type="email" id="bindGoogleEmail" :class="{ 'is-invalid': inputDataCheck.accountError }" class="form-control form-control-lg d-block" placeholder="Email" aria-label="email" aria-describedby="basic-addon1" required>
    <div class="invalid-feedback text-start mt-1">
        {{inputDataCheck.accountErrorMsg}}
    </div>
    <input v-model="inputData.password" type="password" id="bindGooglePassword" :class="{ 'is-invalid': inputDataCheck.passwordError }" class="form-control form-control-lg d-block mt-3" placeholder="Password" aria-label="password" aria-describedby="basic-addon2" required>
    <div class="invalid-feedback text-start mt-1">
        {{inputDataCheck.passwordErrorMsg}}
    </div>
    <button type="button" id="bindGoogle-submit" class="w-100 text-decoration-none text-white mt-3" data-bs-dismiss="modal" :disabled="!isVerify">註冊</button>
    <button type="button" id="bindGoogle-submit" class="w-100 text-decoration-none text-white mt-3" data-bs-dismiss="modal" :disabled="!isVerify">綁定</button>
</form>

@section endJS
{
    <script>
        //#region 登入modal的前端驗證(Vue)
        let bindGoogle_form_vue = new Vue({
            el: "#bindGoogle-form-vue",
            data: {
                inputData: {
                    account: "",
                    password: ""
                },
                inputDataCheck: {
                    accountError: false,
                    accountErrorMsg: "",
                    passwordError: false,
                    passwordErrorMsg: ""
                },
                isVerify: false
            },
            watch: {
                "inputData.account": {
                    immediate: true,
                    handler() {
                        let emailRegexp = /^([\w\.\-]){1,64}\@@([\w\.\-]){1,64}$/
                        if (this.inputData.account == "") {
                            this.inputDataCheck.accountError = true;
                            this.inputDataCheck.accountErrorMsg = "請填寫此欄位";
                        } else if (!emailRegexp.test(this.inputData.account)) {
                            this.inputDataCheck.accountError = true;
                            this.inputDataCheck.accountErrorMsg = "Email輸入格式錯誤";
                        } else {
                            this.inputDataCheck.accountError = false;
                            this.inputDataCheck.accountErrorMsg = "";
                        }

                        this.checkVerify();
                    }
                },
                "inputData.password": {
                    immediate: true,
                    handler() {
                        let passwordRegexp = /^(?!.*[^\x21-\x7e])(?=.{6,50})(?=.*[a-z])(?=.*[A-Z])(?=.*\d).*$/
                        if (this.inputData.password == "") {
                            this.inputDataCheck.passwordError = true;
                            this.inputDataCheck.passwordErrorMsg = "請填寫此欄位";
                        } else if (this.inputData.password.length < 6 || this.inputData.password.length > 50) {
                            this.inputDataCheck.passwordError = true;
                            this.inputDataCheck.passwordErrorMsg = "密碼長度需為6~50字元";
                        } else if (!passwordRegexp.test(this.inputData.password)) {
                            this.inputDataCheck.passwordError = true;
                            this.inputDataCheck.passwordErrorMsg = "密碼必須包含至少1個數字、小寫英文和大寫英文";
                        }
                        else {
                            this.inputDataCheck.passwordError = false;
                            this.inputDataCheck.passwordErrorMsg = "";
                        }

                        this.checkVerify();
                    }
                }
            },
            methods: {
                checkVerify() {
                    for (let prop in this.inputDataCheck) {
                        if (this.inputDataCheck[prop] == true) {
                            this.isVerify = false;
                            return;
                        }
                    }
                    this.isVerify = true;
                }
            }
        })
        //#endregion


    </script>
}